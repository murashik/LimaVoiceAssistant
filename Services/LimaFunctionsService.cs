using LimaVoiceAssistant.Clients;
using LimaVoiceAssistant.Models;
using NLog;
using System.Globalization;
using System.Text;
using FuzzySharp;
using FuzzySharp.SimilarityRatio;

namespace LimaVoiceAssistant.Services;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π Lima
/// </summary>
public class LimaFunctionsService : ILimaFunctionsService
{
    private readonly ILimaApiClient _limaApiClient;
    private readonly IDrugSearchService _drugSearchService;
    private readonly NLog.ILogger _logger;

    public LimaFunctionsService(ILimaApiClient limaApiClient, IDrugSearchService drugSearchService)
    {
        _limaApiClient = limaApiClient;
        _drugSearchService = drugSearchService;
        _logger = LogManager.GetCurrentClassLogger();
    }

    /// <summary>
    /// –§—É–Ω–∫—Ü–∏—è ‚Ññ1: –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏ –≤ –∞–ø—Ç–µ–∫—É
    /// </summary>
    public async Task<string> CreatePharmacyReservationAsync(string pharmacyName, List<DrugOrderItem> drugs, 
        decimal prepaymentPercent = 100, string paymentType = "–Ω–∞–ª–∏—á–Ω—ã–µ", string? comment = null)
    {
        try
        {
            _logger.Info($"–°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏ –≤ –∞–ø—Ç–µ–∫—É '{pharmacyName}' –Ω–∞ {drugs.Count} –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤");

            // 1. –ü–æ–∏—Å–∫ –∞–ø—Ç–µ–∫–∏
            var orgSearch = await _limaApiClient.SearchOrganizationsAsync(pharmacyName);
            var pharmacy = orgSearch.Result.FirstOrDefault(o => o.TypeName.Contains("–∞–ø—Ç–µ–∫–∞", StringComparison.OrdinalIgnoreCase));
            
            if (pharmacy == null)
            {
                return $"‚ùå –ê–ø—Ç–µ–∫–∞ '{pharmacyName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
            }

            // 2. –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            var orderDrugs = new List<OrderDrug>();
            var notFoundDrugs = new List<string>();

            foreach (var drugItem in drugs)
            {
                var foundDrug = await _drugSearchService.FindDrugInPriceListAsync(drugItem.DrugName);
                if (foundDrug != null)
                {
                    orderDrugs.Add(new OrderDrug
                    {
                        IncomeDetailingId = foundDrug.IncomeDetailingId,
                        DrugId = foundDrug.Drug.DrugId,
                        Package = drugItem.Quantity
                    });
                    drugItem.IsFound = true;
                    _logger.Info($"–ü—Ä–µ–ø–∞—Ä–∞—Ç –Ω–∞–π–¥–µ–Ω: '{foundDrug.Drug.DrugName}' ({drugItem.Quantity} —É–ø.)");
                }
                else
                {
                    notFoundDrugs.Add(drugItem.DrugName);
                    _logger.Warn($"–ü—Ä–µ–ø–∞—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: '{drugItem.DrugName}'");
                }
            }

            if (orderDrugs.Count == 0)
            {
                return $"‚ùå –ù–∏ –æ–¥–∏–Ω –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è: {string.Join(", ", notFoundDrugs)}";
            }

            // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä–∂–∏ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã
            var margins = await _limaApiClient.GetMarginsAsync();
            var selectedMargin = margins.FirstOrDefault(m => m.PrepaymentPercent == prepaymentPercent && m.Retail);
            
            if (selectedMargin == null)
            {
                selectedMargin = margins.FirstOrDefault(m => m.Retail);
                if (selectedMargin != null)
                {
                    _logger.Warn($"–ú–∞—Ä–∂–∞ —Å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–æ–π {prepaymentPercent}% –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {selectedMargin.PrepaymentPercent}%");
                }
                else
                {
                    return "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π –∞–ø—Ç–µ–∫–∏.";
                }
            }

            // 4. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ)
            var paymentVariantId = !string.IsNullOrWhiteSpace(paymentType) && 
                                   paymentType.ToLowerInvariant().Contains("–Ω–∞–ª–∏—á–Ω") ? 2 : 1;

            // 5. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
            var visitRequest = new CreateVisitRequest
            {
                OrganizationId = pharmacy.Id,
                VisitType = 1, // –ê–ø—Ç–µ–∫–∞
                MarginId = selectedMargin.Id,
                IsWholesaler = false,
                Complete = true,
                PaymentVariantId = paymentVariantId,
                Comment = comment ?? "–ì–æ–ª–æ—Å–æ–≤–∞—è –±—Ä–æ–Ω—å —á–µ—Ä–µ–∑ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞",
                Drugs = orderDrugs
            };

            var success = await _limaApiClient.CreateVisitAsync(visitRequest);

            if (success)
            {
                var result = new StringBuilder();
                result.AppendLine("‚úÖ –ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!");
                result.AppendLine($"üè™ –ê–ø—Ç–µ–∫–∞: {pharmacy.Name}");
                result.AppendLine($"üí∞ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: {selectedMargin.PrepaymentPercent}%");
                result.AppendLine($"üí≥ –û–ø–ª–∞—Ç–∞: {(paymentVariantId == 2 ? "–Ω–∞–ª–∏—á–Ω—ã–º–∏" : "–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º")}");
                result.AppendLine($"üì¶ –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã ({orderDrugs.Count}):");
                
                foreach (var drug in drugs.Where(d => d.IsFound))
                {
                    result.AppendLine($"   ‚Ä¢ {drug.DrugName} ‚Äî {drug.Quantity} —É–ø.");
                }

                if (notFoundDrugs.Count > 0)
                {
                    result.AppendLine($"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã: {string.Join(", ", notFoundDrugs)}");
                }

                return result.ToString();
            }
            else
            {
                return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.";
            }
        }
        catch (Exception ex)
        {
            _logger.Error(ex, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏ –≤ –∞–ø—Ç–µ–∫—É '{pharmacyName}'");
            return $"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏: {ex.Message}";
        }
    }

    /// <summary>
    /// –§—É–Ω–∫—Ü–∏—è ‚Ññ2: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∞ –≤ –õ–ü–£
    /// </summary>
    public async Task<string> CreateClinicVisitAsync(string clinicName, string? doctorName, List<string> discussedDrugs, 
        double? latitude = null, double? longitude = null, string? comment = null)
    {
        try
        {
            _logger.Info($"–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∞ –≤ –õ–ü–£ '{clinicName}', –≤—Ä–∞—á: {doctorName ?? "–Ω–µ —É–∫–∞–∑–∞–Ω"}");

            // 1. –ü–æ–∏—Å–∫ –õ–ü–£
            var orgSearch = await _limaApiClient.SearchOrganizationsAsync(clinicName);
            var clinic = orgSearch.Result.FirstOrDefault(o => 
                !o.TypeName.Contains("–∞–ø—Ç–µ–∫–∞", StringComparison.OrdinalIgnoreCase));
            
            if (clinic == null)
            {
                return $"‚ùå –õ–ü–£ '{clinicName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
            }

            // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–∞—á–∞
            if (string.IsNullOrWhiteSpace(doctorName))
            {
                return "‚ùå –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑–∏—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤—Ä–∞—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–æ–≤–∏—Ç–µ –∏–º—è –≤—Ä–∞—á–∞.";
            }

            // 3. –ü–æ–∏—Å–∫ –≤—Ä–∞—á–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FuzzySharp –¥–ª—è –Ω–µ—á—ë—Ç–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
            int? doctorId = null;
            Doctor? foundDoctor = null;
            
            var doctors = await _limaApiClient.GetOrganizationDoctorsAsync(clinic.Id);
            
            if (doctors.Count > 0)
            {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º FuzzySharp –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–µ–≥–æ –∏–º–µ–Ω–∏
                var bestMatch = Process.ExtractOne(doctorName, doctors.Select(d => d.FullName));
                
                // –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±–æ–ª—å—à–µ 70%, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω–∞—à–ª–∏ –≤—Ä–∞—á–∞
                if (bestMatch.Score >= 70)
                {
                    foundDoctor = doctors.First(d => d.FullName == bestMatch.Value);
                    doctorId = foundDoctor.Id;
                    _logger.Info($"–ù–∞–π–¥–µ–Ω –≤—Ä–∞—á '{foundDoctor.FullName}' —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é {bestMatch.Score}% –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{doctorName}'");
                }
                else
                {
                    _logger.Warn($"–í—Ä–∞—á '{doctorName}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –õ–ü–£ '{clinicName}'. –õ—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '{bestMatch.Value}' ({bestMatch.Score}%)");
                }
            }
            

            // 4. –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏
            var talkedAboutDrugs = new List<TalkedAboutDrug>();
            var notFoundDrugs = new List<string>();

            foreach (var drugName in discussedDrugs)
            {
                var foundDrug = await _drugSearchService.FindCompanyDrugAsync(drugName);
                if (foundDrug != null)
                {
                    talkedAboutDrugs.Add(new TalkedAboutDrug
                    {
                        DrugId = foundDrug.Id,
                        StatusId = null
                    });
                    _logger.Info($"–ü—Ä–µ–ø–∞—Ä–∞—Ç –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤–∏–∑–∏—Ç–∞: '{foundDrug.Name}'");
                }
                else
                {
                    notFoundDrugs.Add(drugName);
                    _logger.Warn($"–ü—Ä–µ–ø–∞—Ä–∞—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: '{drugName}'");
                }
            }

            // 5. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∞
            var visitRequest = new CreateVisitRequest
            {
                OrganizationId = clinic.Id,
                VisitType = 2, // –õ–ü–£
                Complete = true,
                Latitude = latitude,
                Longitude = longitude,
                DoctorId = doctorId,
                Comment = comment ?? "–í–∏–∑–∏—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞",
                TalkedAboutDrugs = talkedAboutDrugs
            };

            var success = await _limaApiClient.CreateVisitAsync(visitRequest);

            if (success)
            {
                var result = new StringBuilder();
                result.AppendLine("‚úÖ –í–∏–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!");
                result.AppendLine($"üè• –õ–ü–£: {clinic.Name}");
                
                if (foundDoctor != null)
                {
                    result.AppendLine($"üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {foundDoctor.FullName}");
                    if (!string.IsNullOrEmpty(foundDoctor.Position))
                        result.AppendLine($"üìù –î–æ–ª–∂–Ω–æ—Å—Ç—å: {foundDoctor.Position}");
                }
                else if (!string.IsNullOrWhiteSpace(doctorName))
                {
                    result.AppendLine($"üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {doctorName} (–Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ)");
                }

                result.AppendLine($"üíä –ü—Ä–µ–∑–µ–Ω—Ç–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã ({talkedAboutDrugs.Count}):");
                
                int index = 0;
                foreach (var drugName in discussedDrugs)
                {
                    var status = index < talkedAboutDrugs.Count ? "‚úÖ" : "‚ùì";
                    result.AppendLine($"   {status} {drugName}");
                    index++;
                }

                if (notFoundDrugs.Count > 0)
                {
                    result.AppendLine($"‚ö†Ô∏è –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã –Ω–µ –∏–∑ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏: {string.Join(", ", notFoundDrugs)}");
                }

                return result.ToString();
            }
            else
            {
                return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–∑–∏—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.";
            }
        }
        catch (Exception ex)
        {
            _logger.Error(ex, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑–∏—Ç–∞ –≤ –õ–ü–£ '{clinicName}'");
            return $"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑–∏—Ç–∞: {ex.Message}";
        }
    }

    /// <summary>
    /// –§—É–Ω–∫—Ü–∏—è ‚Ññ3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∏–∑–∏—Ç–æ–≤ –∏ –∑–∞–∫–∞–∑–æ–≤
    /// </summary>
    public async Task<string> GetVisitHistoryAsync(string? visitType = null, string? organizationName = null, int page = 1, string? date = null)
    {
        try
        {
            _logger.Info($"–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∏–∑–∏—Ç–æ–≤: —Ç–∏–ø={visitType}, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è={organizationName}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞={page}, –¥–∞—Ç–∞={date}");

            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤–∏–∑–∏—Ç–∞
            int? typeId = null;
            if (!string.IsNullOrWhiteSpace(visitType))
            {
                if (visitType.Contains("–∞–ø—Ç–µ–∫", StringComparison.OrdinalIgnoreCase))
                    typeId = 1;
                else if (visitType.Contains("–ª–ø—É", StringComparison.OrdinalIgnoreCase) || 
                         visitType.Contains("–∫–ª–∏–Ω–∏–∫", StringComparison.OrdinalIgnoreCase) ||
                         visitType.Contains("–±–æ–ª—å–Ω–∏—Ü", StringComparison.OrdinalIgnoreCase))
                    typeId = 2;
            }

            // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
            string? startDate = !string.IsNullOrWhiteSpace(date) ? ParseDateInput(date) : null;

            var history = await _limaApiClient.GetVisitHistoryAsync(page, typeId, organizationName, startDate);

            if (history.Result.Count == 0)
            {
                return page == 1 ? "üìã –ò—Å—Ç–æ—Ä–∏—è –≤–∏–∑–∏—Ç–æ–≤ –ø—É—Å—Ç–∞." : $"üìã –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page} –≤–∏–∑–∏—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.";
            }

            var result = new StringBuilder();
            result.AppendLine($"üìã –ò—Å—Ç–æ—Ä–∏—è –≤–∏–∑–∏—Ç–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {history.Page.PageNumber} –∏–∑ {history.Page.TotalPages}):");
            result.AppendLine($"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {history.Page.Count} –∑–∞–ø–∏—Å–µ–π\n");

            foreach (var visit in history.Result)
            {
                var visitIcon = visit.VisitType == 1 ? "üè™" : "üè•";
                var dateStr = visit.DateCreate.ToString("dd.MM.yyyy HH:mm");
                
                result.AppendLine($"{visitIcon} {visit.Organization.Name}");
                result.AppendLine($"üìÖ {dateStr} | {visit.VisitStatusName}");
                
                if (visit.Doctor != null)
                {
                    result.AppendLine($"üë®‚Äç‚öïÔ∏è {visit.Doctor.FullName}");
                }

                // –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–∏–∑–∏—Ç–∞
                var drugsToShow = visit.OrderStatus == 0 ? visit.TalkedAboutDrugs.Cast<object>().ToList() : 
                                  visit.Drugs.Cast<object>().ToList();
                
                if (drugsToShow.Count > 0)
                {
                    result.Append("üíä ");
                    result.AppendLine(string.Join(", ", drugsToShow.Take(3).Select(d => 
                        d is TalkedAboutDrug td ? td.DrugName : 
                        d is OrderDrug od ? $"{od.Package} —É–ø." : d.ToString())));
                    
                    if (drugsToShow.Count > 3)
                        result.AppendLine($"   ... –∏ –µ—â—ë {drugsToShow.Count - 3}");
                }

                if (visit.TotalSum > 0)
                {
                    result.AppendLine($"üí∞ –°—É–º–º–∞: {visit.TotalSum:F2} —Å—É–º");
                }

                result.AppendLine();
            }

            if (history.Page.HasNextPage)
            {
                result.AppendLine($"‚ñ∂Ô∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∫–∞–∂–∏—Ç–µ: \"–ü–æ–∫–∞–∂–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page + 1}\"");
            }

            return result.ToString();
        }
        catch (Exception ex)
        {
            _logger.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∏–∑–∏—Ç–æ–≤");
            return $"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {ex.Message}";
        }
    }

    /// <summary>
    /// –§—É–Ω–∫—Ü–∏—è ‚Ññ4: –ü–æ–∏—Å–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    /// </summary>
    public async Task<string> SearchOrganizationsAsync(string organizationName)
    {
        try
        {
            _logger.Info($"–ü–æ–∏—Å–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{organizationName}'");

            var searchResult = await _limaApiClient.SearchOrganizationsAsync(organizationName);

            if (searchResult.Result.Count == 0)
            {
                return $"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{organizationName}' –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.";
            }

            var result = new StringBuilder();
            result.AppendLine($"üîç –ù–∞–π–¥–µ–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: {searchResult.Result.Count}\n");

            foreach (var org in searchResult.Result.Take(10)) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
            {
                var icon = org.TypeName.Contains("–∞–ø—Ç–µ–∫–∞", StringComparison.OrdinalIgnoreCase) ? "üè™" : "üè•";
                
                result.AppendLine($"{icon} {org.Name}");
                result.AppendLine($"üìç {org.Address}");
                result.AppendLine($"üè∑Ô∏è {org.TypeName} | {org.RegionName}");
                
                if (!string.IsNullOrEmpty(org.Phone))
                    result.AppendLine($"üìû {org.Phone}");
                
                result.AppendLine();
            }

            if (searchResult.Result.Count > 10)
            {
                result.AppendLine($"... –∏ –µ—â—ë {searchResult.Result.Count - 10} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π");
            }

            return result.ToString();
        }
        catch (Exception ex)
        {
            _logger.Error(ex, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: '{organizationName}'");
            return $"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {ex.Message}";
        }
    }

    /// <summary>
    /// –§—É–Ω–∫—Ü–∏—è ‚Ññ5: –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–ª–∞–Ω–∞ –≤–∏–∑–∏—Ç–æ–≤
    /// </summary>
    public async Task<string> GetPlannedVisitsAsync(string? date = null, string viewType = "–¥–µ–Ω—å")
    {
        try
        {
            _logger.Info($"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤–∏–∑–∏—Ç–æ–≤: –¥–∞—Ç–∞={date}, —Ç–∏–ø={viewType}");

            if (viewType.Contains("–º–µ—Å—è—Ü"))
            {
                var monthPlan = await _limaApiClient.GetMonthPlansAsync();
                
                if (monthPlan.Count == 0)
                {
                    return "üìÖ –ù–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –≤–∏–∑–∏—Ç—ã –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.";
                }

                var result = new StringBuilder();
                result.AppendLine("üìÖ –ü–ª–∞–Ω –≤–∏–∑–∏—Ç–æ–≤ –Ω–∞ –º–µ—Å—è—Ü:\n");
                
                var totalVisits = monthPlan.Sum(p => p.VisitCount);
                result.AppendLine($"üìä –í—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –≤–∏–∑–∏—Ç–æ–≤: {totalVisits}\n");

                foreach (var planItem in monthPlan.OrderBy(p => p.Date))
                {
                    var planDate = DateTime.ParseExact(planItem.Date, "yyyy-MM-dd", CultureInfo.InvariantCulture);
                    var dayOfWeek = planDate.ToString("dddd", new CultureInfo("ru-RU"));
                    
                    result.AppendLine($"üìÖ {planDate:dd.MM} ({dayOfWeek}) ‚Äî {planItem.VisitCount} –≤–∏–∑–∏—Ç–æ–≤");
                }

                return result.ToString();
            }
            else
            {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
                string targetDate;
                
                if (string.IsNullOrWhiteSpace(date))
                {
                    targetDate = DateTime.Today.ToString("yyyy-MM-dd");
                }
                else
                {
                    targetDate = ParseDateInput(date);
                }

                var dayPlan = await _limaApiClient.GetPlannedVisitsAsync(targetDate);
                
                if (dayPlan.Result.Count == 0)
                {
                    var displayDate = DateTime.ParseExact(targetDate, "yyyy-MM-dd", CultureInfo.InvariantCulture);
                    return $"üìÖ –ù–∞ {displayDate:dd.MM.yyyy} –≤–∏–∑–∏—Ç—ã –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.";
                }

                var result = new StringBuilder();
                var displayTargetDate = DateTime.ParseExact(targetDate, "yyyy-MM-dd", CultureInfo.InvariantCulture);
                result.AppendLine($"üìÖ –ü–ª–∞–Ω –≤–∏–∑–∏—Ç–æ–≤ –Ω–∞ {displayTargetDate:dd.MM.yyyy}:\n");

                foreach (var visit in dayPlan.Result)
                {
                    var icon = visit.Organization.TypeId == 1 ? "üè™" : "üè•";
                    
                    result.AppendLine($"{icon} {visit.Organization.Name}");
                    result.AppendLine($"üìç {visit.Organization.Address}");
                    result.AppendLine($"üïê {visit.StartDate:HH:mm} | {visit.VisitStatusName}");
                    
                    if (visit.Doctor != null)
                    {
                        result.AppendLine($"üë®‚Äç‚öïÔ∏è {visit.Doctor.FullName} ({visit.Doctor.Position})");
                    }
                    
                    result.AppendLine();
                }

                return result.ToString();
            }
        }
        catch (Exception ex)
        {
            _logger.Error(ex, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –≤–∏–∑–∏—Ç–æ–≤: –¥–∞—Ç–∞={date}, —Ç–∏–ø={viewType}");
            return $"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞: {ex.Message}";
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –≤—Å–µ—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤
    /// </summary>
    public async Task<string> GetDrugStockAsync(string? drugName = null)
    {
        try
        {
            // –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞—Ç–∫–∏
            if (string.IsNullOrWhiteSpace(drugName))
            {
                _logger.Info("–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤—Å–µ—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤");
                
                var allDrugs = await _drugSearchService.GetAllDrugBalancesAsync();
                
                if (allDrugs.Count == 0)
                {
                    return "‚ùå –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.";
                }

                var result = new StringBuilder();
                result.AppendLine($"üìã –û—Å—Ç–∞—Ç–∫–∏ –≤—Å–µ—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ ({allDrugs.Count}):");
                result.AppendLine();

                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
                var drugsToShow = allDrugs
                    .OrderBy(d => d.Drug.DrugName)
                    .Take(20)
                    .ToList();

                foreach (var drug in drugsToShow)
                {
                    var stockStatus = drug.ActualBalance > 10 ? "‚úÖ" : drug.ActualBalance > 0 ? "‚ö†Ô∏è" : "‚ùå";
                    result.AppendLine($"{stockStatus} {drug.Drug.DrugName} ‚Äî {drug.ActualBalance} —É–ø.");
                    
                    if (drug.Price.HasValue)
                        result.Append($" (—Ü–µ–Ω–∞: {drug.Price:F2} —Å—É–º)");
                    result.AppendLine();
                }

                if (allDrugs.Count > 20)
                {
                    result.AppendLine($"\n... –∏ –µ—â—ë {allDrugs.Count - 20} –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤");
                    result.AppendLine("–î–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.");
                }

                // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                var inStock = allDrugs.Count(d => d.ActualBalance > 0);
                var lowStock = allDrugs.Count(d => d.ActualBalance > 0 && d.ActualBalance <= 10);
                var outOfStock = allDrugs.Count(d => d.ActualBalance == 0);
                
                result.AppendLine($"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
                result.AppendLine($"‚úÖ –í –Ω–∞–ª–∏—á–∏–∏: {inStock}");
                result.AppendLine($"‚ö†Ô∏è –ú–∞–ª–æ: {lowStock} (‚â§10 —É–ø.)");
                result.AppendLine($"‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏: {outOfStock}");

                return result.ToString();
            }

            // –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
            _logger.Info($"–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞: '{drugName}'");

            var foundDrug = await _drugSearchService.FindDrugInPriceListAsync(drugName, 60);
            
            if (foundDrug == null)
            {
                // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã
                var similarDrugs = await _drugSearchService.SearchSimilarDrugsAsync(drugName, 50, 5);
                
                if (similarDrugs.Count == 0)
                {
                    return $"‚ùå –ü—Ä–µ–ø–∞—Ä–∞—Ç '{drugName}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–µ.";
                }

                var result = new StringBuilder();
                result.AppendLine($"‚ùì –ü—Ä–µ–ø–∞—Ä–∞—Ç '{drugName}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:");
                
                foreach (var drug in similarDrugs)
                {
                    var stockStatus = drug.ActualBalance > 10 ? "‚úÖ" : drug.ActualBalance > 0 ? "‚ö†Ô∏è" : "‚ùå";
                    result.AppendLine($"{stockStatus} {drug.Drug.DrugName} ‚Äî –æ—Å—Ç–∞—Ç–æ–∫: {drug.ActualBalance} —É–ø.");
                }

                return result.ToString();
            }
            else
            {
                var result = new StringBuilder();
                var stockStatus = foundDrug.ActualBalance > 10 ? "‚úÖ" : foundDrug.ActualBalance > 0 ? "‚ö†Ô∏è" : "‚ùå";
                
                result.AppendLine($"{stockStatus} {foundDrug.Drug.DrugName}");
                result.AppendLine($"üì¶ –û—Å—Ç–∞—Ç–æ–∫: {foundDrug.ActualBalance} —É–ø–∞–∫–æ–≤–æ–∫");
                
                if (foundDrug.Drug.Quantity.HasValue)
                    result.AppendLine($"üî¢ –í —É–ø–∞–∫–æ–≤–∫–µ: {foundDrug.Drug.Quantity} —à—Ç.");
                
                if (foundDrug.Price.HasValue)
                    result.AppendLine($"üí∞ –¶–µ–Ω–∞: {foundDrug.Price:F2} —Å—É–º");

                return result.ToString();
            }
        }
        catch (Exception ex)
        {
            _logger.Error(ex, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞: '{drugName}'");
            return $"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: {ex.Message}";
        }
    }

    /// <summary>
    /// –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    /// </summary>
    private string ParseDateInput(string input)
    {
        var normalizedInput = input.ToLowerInvariant().Trim();
        var today = DateTime.Today;

        // –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        if (normalizedInput.Contains("–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫") || normalizedInput.Contains("monday"))
            return GetNextWeekday(today, DayOfWeek.Monday).ToString("yyyy-MM-dd");
        if (normalizedInput.Contains("–≤—Ç–æ—Ä–Ω–∏–∫") || normalizedInput.Contains("tuesday"))
            return GetNextWeekday(today, DayOfWeek.Tuesday).ToString("yyyy-MM-dd");
        if (normalizedInput.Contains("—Å—Ä–µ–¥–∞") || normalizedInput.Contains("wednesday"))
            return GetNextWeekday(today, DayOfWeek.Wednesday).ToString("yyyy-MM-dd");
        if (normalizedInput.Contains("—á–µ—Ç–≤–µ—Ä–≥") || normalizedInput.Contains("thursday"))
            return GetNextWeekday(today, DayOfWeek.Thursday).ToString("yyyy-MM-dd");
        if (normalizedInput.Contains("–ø—è—Ç–Ω–∏—Ü") || normalizedInput.Contains("friday"))
            return GetNextWeekday(today, DayOfWeek.Friday).ToString("yyyy-MM-dd");
        if (normalizedInput.Contains("—Å—É–±–±–æ—Ç") || normalizedInput.Contains("saturday"))
            return GetNextWeekday(today, DayOfWeek.Saturday).ToString("yyyy-MM-dd");
        if (normalizedInput.Contains("–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å") || normalizedInput.Contains("sunday"))
            return GetNextWeekday(today, DayOfWeek.Sunday).ToString("yyyy-MM-dd");

        // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã
        if (normalizedInput.Contains("—Å–µ–≥–æ–¥–Ω—è") || normalizedInput.Contains("today"))
            return today.ToString("yyyy-MM-dd");
        if (normalizedInput.Contains("–∑–∞–≤—Ç—Ä–∞") || normalizedInput.Contains("tomorrow"))
            return today.AddDays(1).ToString("yyyy-MM-dd");
        if (normalizedInput.Contains("–≤—á–µ—Ä–∞") || normalizedInput.Contains("yesterday"))
            return today.AddDays(-1).ToString("yyyy-MM-dd");

        // –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–∫ –¥–∞—Ç–∞
        if (DateTime.TryParse(input, out var parsedDate))
            return parsedDate.ToString("yyyy-MM-dd");

        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ–≥–æ–¥–Ω—è
        return today.ToString("yyyy-MM-dd");
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    /// </summary>
    private DateTime GetNextWeekday(DateTime startDate, DayOfWeek targetDay)
    {
        var daysUntilTarget = ((int)targetDay - (int)startDate.DayOfWeek + 7) % 7;
        if (daysUntilTarget == 0 && startDate.DayOfWeek == targetDay)
            daysUntilTarget = 7; // –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è, –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Ç–æ—Ç –∂–µ –¥–µ–Ω—å
        return startDate.AddDays(daysUntilTarget);
    }
}